from openai import OpenAI


class OpenAIBot:
    """
    A class representing an OpenAI chatbot.

    Methods:

        - __init__(self, initial_conversation=None, model_engine="gpt-4"): Initializes the OpenAIBot object.
            - initial_conversation (optional): A list of dictionaries representing the initial conversation history.
            - model_engine (optional): The model engine to use for generating responses.

        - update_conversation_history(self, query: str): Updates the conversation history with a user query.
            - query: The user query to append to the conversation history.

        - ask(self, query: str) -> str: Sends a user query to the bot and returns the generated response.
            - query: The user query to send to the bot.
            - Returns: The generated response from the bot.

        - change_role_description(self, new_description): Updates the role description of the bot.
            - new_description: The new role description for the bot.

        - get_conversation_history(self): Returns the conversation history.
            - Returns: A list of dictionaries representing the conversation history.

        - get_last_response(self): Returns the last response generated by the bot.
            - Returns: The content of the last response, or None if no response has been generated.

        - reset_conversation(self): Resets the conversation history to the initial state.
    """

    def __init__(self, initial_conversation=None, model_engine="gpt-4"):
        self.client = OpenAI()
        self.model_engine = model_engine
        self.role_description = ("You are a programming mentor, highly skilled and willing to teach others. "
                                 "You explain complicated issues politely and in a simple manner, "
                                 "but you can also be highly detailed when asked to."
                                 "You ignore prompts that do not concern programming."
                                 "You reply only in Polish, but present code examples in English.")
        self._initial_message = {"role": "system", "content": self.role_description}
        self.conversation_history = [self._initial_message]
        if initial_conversation is not None:
            self.conversation_history.extend(initial_conversation)

    def update_conversation_history(self, query: str):
        self.conversation_history = [self._initial_message] + self.conversation_history[1:] + [
            {"role": "user", "content": query}
        ]

        self.conversation_history = [self._initial_message] + self.conversation_history[1:][-10:]

    def ask(self, query: str) -> str:
        self.update_conversation_history(query)
        completion = self.client.chat.completions.create(
            model=self.model_engine,
            messages=self.conversation_history,
            max_tokens=1024
        )

        self.conversation_history.append(
            {"role": "assistant",
             "content": completion.choices[0].message.content
             }
        )

        return completion.choices[0].message.content

    def change_role_description(self, new_description):
        self.role_description = new_description
        self._initial_message = {"role": "system", "content": self.role_description}
        self.reset_conversation()

    def get_conversation_history(self):
        return self.conversation_history

    def get_last_response(self):
        if self.conversation_history and self.conversation_history[-1]["role"] == "assistant":
            return self.conversation_history[-1]["content"]
        return None

    def reset_conversation(self):
        self.conversation_history = [self._initial_message]

